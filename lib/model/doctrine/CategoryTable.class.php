<?php

/**
 * CategoryTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CategoryTable extends Wf_Doctrine_Table 
{

  /**
   * Returns an instance of this class.
   *
   * @return object CategoryTable
   */
  public static function getInstance() 
  {
    return Doctrine_Core::getTable('Category');
  }
  
  /**
   * @return Doctrine_Query
   */
  public static function buildQueryForLiveSearch(Doctrine_Query $q = null)
  {
    return static::getInstance()->createQuery('ca')->orderBy('ca.name ASC');
  }
  
    /**
   * !!NOTE: findBySearchQuery receives UNSANITIZED input.
   * 
   * @param string $query
   * @param array $params None currently used
   */
  public static function findBySearchQuery($query, $params = array())
  {
    $query = static::buildQueryForLiveSearch()
      ->select('ca.id, ca.id AS key, ca.name AS label, ca.name AS name') //should match sfGuardUser::getLiveSearchName
      ->addWhere('ca.name LIKE ?', '%' . $query . '%')
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ->limit(10);

    return $query->execute();
  }

  public function findObjectForFilter($id)
  {
    return static::getInstance()->findOneById($id);
  }
  
  public function findSortedTreeChildrenOfCategory($categoryId)
  {
    $tree = static::getInstance()->getTree()->findSortedTrees('name', 'root_id = ' . $categoryId);
    array_shift($tree);
    return $tree;
  }  
  
  public function findSortedTreeChildrenOfIndividualTree()
  {
    return $this->findSortedTreeChildrenOfCategory(sfConfig::get('app_category_individual_id'));
  }

  public function findSortedTreeChildrenOfGroupTree()
  {
    return $this->findSortedTreeChildrenOfCategory(sfConfig::get('app_category_group_id'));
  }
  
  
  public function findChoicesForIndividualCategory()
  {
    return $this->findChoicesForCategory(sfConfig::get('app_category_individual_id'));
  }
  
  public function findChoicesForCategory($categoryId)
  {
    $categories = Doctrine_Query::create()
             ->from('Category ca INDEXBY ca.id')
             ->select('ca.name')
             ->where('root_id = ? AND level = ?', array($categoryId, 1))
             ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
             ->execute();
    
    return wfToolkit::arrayPluck($categories, 'name', array('maintain_keys' => true));
  }  
   
  public function buildQueryForProfileIds(Doctrine_Query $query, array $profileIds)
  {
    $rootAlias = $query->getRootAlias();
    $query->innerJoin($rootAlias. '.ProfileCategory pc')
      ->andWhereIn('pc.profile_id', $profileIds);
  }
  
}