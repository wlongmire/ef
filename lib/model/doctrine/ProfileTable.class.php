<?php

/**
 * ProfileTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProfileTable extends Wf_Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object ProfileTable
   */
  public static function getInstance()
  {
      return Doctrine_Core::getTable('Profile');
  }
  
  /*
   * @return Doctrine_Query
   */
  public static function buildQueryForLiveSearch(Doctrine_Query $q = null)
  {
    return static::getInstance()->createQuery('pf')->orderBy('pf.name ASC');
  }
  
  /*
   * @return Doctrine_Query
   */
  public static function buildQueryForGroupStatus($isGroup)
  {
    return static::getInstance()->createQuery('pf')
      ->where('pf.is_group = ?', $isGroup)
      ->orderBy('pf.name ASC');
  }
  
  /*
   * @return Doctrine_Query
   */
  public static function buildQueryForProfileAdmin(Doctrine_Query $q)
  {
    $rootAlias = $q->getRootAlias();
    $q
      ->leftJoin($rootAlias . '.User gu')
      ->leftJoin($rootAlias . '.Location lo');
    return $q;
  }
  
   
  public function buildQueryForFilters(array $filters = array())
  {
    $query = $this->createQuery('pf')
      ->select('pf.*')      
      ->leftJoin('pf.Picture pic')
      ->addSelect('pic.type, pic.format, pic.slug, pic.width, pic.height, pic.title')
      ->leftJoin('pf.Events ev')
      ->leftJoin('ev.EventOccurances eo WITH eo.end_date >= ?', date('Y-m-d'))
      ->addSelect('COUNT(DISTINCT(eo.event_id)) AS event_count')      
      ->leftJoin('pf.ProfileGroupMemberships pgm')
      ->addSelect('COALESCE(pgm.member_profile_id, FALSE) AS has_group_member')
      ->leftJoin('pf.Location lc')
      ->innerJoin('pf.Categories ca') //profile must have a category to be listed
      ->leftJoin('pf.Disciplines dc')
      ->addSelect('lc.name, ca.name, dc.name, GROUP_CONCAT(DISTINCT dc.name) AS disciplines_all, GROUP_CONCAT(DISTINCT ca.name) AS categories_all')
      ->addWhere('pf.name IS NOT NULL AND pf.name != ""')
      ->groupBy('pf.id')
      ->orderBy('event_count DESC, pf.name ASC')
      ->setHydrationMode(Doctrine::HYDRATE_ARRAY);    
    
    if ($filters)
    {
      foreach($filters as $filter => $value)
      {
        $method = sprintf('add%sFilterToQuery', ucfirst(sfInflector::camelize($filter)));
        if ($value && method_exists($this, $method))
        {
          $this->$method($query, $value, $filters);
        }
      }
    }
    
    return $query;
  }
  
  public function addCategoryFilterToQuery(Doctrine_Query $query, Category $category)
  {
    $categoryIds = $category->getNode()->getCachedDescendantIds(null, true);
    $query->innerJoin('pf.ProfileCategory pc WITH pc.category_id IN (' . implode(',' , $categoryIds) . ')');
  }
  
  public function addDisciplineFilterToQuery(Doctrine_Query $query, Discipline $discipline)
  {
    if (!$query->contains('pf.ProfileDiscipline'))
    {
      $query->innerJoin('pf.ProfileDiscipline pd');
    }    
    $disciplineIds = $discipline->getNode()->getCachedDescendantIds(null, true);
    $query->andWhereIn('pd.discipline_id', $disciplineIds);
  }

  public function addLocationFilterToQuery(Doctrine_Query $query, Location $location)
  {
    $locationIds = $location->getNode()->getCachedDescendantIds(null, true);
    $query
      ->andWhereIn('pf.location_id', $locationIds);
  }
  
  public function addTagFilterToQuery(Doctrine_Query $query, Doctrine_Collection $tags)
  {
    if ($tags->count())
    {
      $query->innerJoin(sprintf('pf.ProfileTagging tg WITH tg.tag_id IN (%s)', implode(',', $tags->getPrimaryKeys())));
      if ($tags->count() > 1)
      {
        $query->addHaving('COUNT(DISTINCT tg.tag_id) = ?', $tags->count());
      }
    }
  }
  
  public function addProfileEventTagFilterToQuery(Doctrine_Query $query, Doctrine_Collection $tags)
  {
    if ($tags->count())
    {
      $query->innerJoin(sprintf('ev.EventTagging etg WITH etg.tag_id IN (%s)', implode(',', $tags->getPrimaryKeys())));
      if ($tags->count() > 1)
      {
        $query->addHaving('COUNT(DISTINCT etg.tag_id) = ?', $tags->count());
      }      
    }
  }
  
  public function addNameFilterToQuery(Doctrine_Query $query, $name)
  {
    $query
      ->addWhere('pf.name LIKE ?', '%' . $name . '%')
      ->orderBy('pf.name LIKE "' . $name . '%" DESC, event_count DESC, pf.name ASC');
  }
  
  public function addProfileFilterToQuery(Doctrine_Query $query, Profile $profile)
  {
    if ($profile->is_group)
    {
      $query->innerJoin('pf.ProfileMemberGroups pmg WITH pmg.group_profile_id = ?', $profile->id);
    }
  }

  public static function findObjectForShow($parameters)
  {
    $query = static::getInstance()->createQuery('pf');
    return $query
      ->where('pf.id = ?', $parameters['id'])
      ->execute();
  }
  
  public static function findObjectForClaimToken($parameters)
  {
    $query = static::getInstance()->createQuery('pf');
    return $query
      ->where('pf.id = ?', wfToolkit::decrypt(urldecode($parameters['claim_token'])))
      ->execute();
  }
  
  /**
   * !!NOTE: findBySearchQuery receives UNSANITIZED input.
   * 
   * @param string $query
   * @param array $params None currently used
   * @return array Up to $limit Fields matching $query indexed by Field id
   */
  public static function findBySearchQuery($query, $params = array())
  {
    $query = static::buildQueryForLiveSearch()
      ->select('pf.id, pf.id AS key, pf.name AS name, pf.name AS label') 
      ->addWhere('pf.name LIKE ?', '%' . $query . '%')
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ->limit(10);
    
    if (isset($params['is_group']))
    {
      $query->addWhere('pf.is_group = ?', $params['is_group']);
    }

    return $query->execute();
  }
  
  /**
   * @param type $filters
   * @return integer
   */
  public function countForFilters($filters)
  {
    return $this->buildQueryForFilters($filters)->count();
  }
  
  /**
   * @return Profile
   */
  public function findObjectForFilter($id)
  {
    return static::getInstance()->findOneById($id);
  }
  
  /**
   * @return Profile
   */
  public function findGroupMembers(Profile $profile)
  {
    return $this->createQuery('pf')
      ->innerJoin('pf.ProfileMemberGroups pmg WITH pmg.group_profile_id = ?', $profile->id)
      ->orderBy('pf.name ASC')
      ->execute();
  }
    /**
   * @return Profile
   */
  public function findGroupMemberships(Profile $profile)
  {
    return $this->createQuery('pf')
      ->innerJoin('pf.ProfileGroupMemberships pgm WITH pgm.member_profile_id = ?', $profile->id)
      ->orderBy('pf.name ASC')
      ->execute();
  }
  
  public static function populateEvents(&$events)
  {
    $profiles = Doctrine_Query::create()
      ->from('Profile pf')
      ->select('pf.name, pf.id')
      ->leftJoin('pf.Picture pic')
      ->addSelect('pic.type, pic.format, pic.slug, pic.width, pic.height, pic.title')      
      ->innerJoin('pf.EventProfile ep')
      ->addSelect('ep.event_id')
      ->whereIn('ep.event_id', wfToolkit::arrayPluck($events, 'id'))
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ->execute();
    
    foreach($profiles as $profile)
    {
      foreach($profile['EventProfile'] as $ep)
      {
        $events[$ep['event_id']]['Profiles'][] = $profile;
      }
    }
  }
}