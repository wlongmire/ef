<?php

/**
 * BasefsCronTask
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $command
 * @property string $frequency
 * @property integer $priority
 * @property boolean $enabled
 * @property timestamp $next_run
 * 
 * @method integer    getId()        Returns the current record's "id" value
 * @method string     getName()      Returns the current record's "name" value
 * @method string     getCommand()   Returns the current record's "command" value
 * @method string     getFrequency() Returns the current record's "frequency" value
 * @method integer    getPriority()  Returns the current record's "priority" value
 * @method boolean    getEnabled()   Returns the current record's "enabled" value
 * @method timestamp  getNextRun()   Returns the current record's "next_run" value
 * @method fsCronTask setId()        Sets the current record's "id" value
 * @method fsCronTask setName()      Sets the current record's "name" value
 * @method fsCronTask setCommand()   Sets the current record's "command" value
 * @method fsCronTask setFrequency() Sets the current record's "frequency" value
 * @method fsCronTask setPriority()  Sets the current record's "priority" value
 * @method fsCronTask setEnabled()   Sets the current record's "enabled" value
 * @method fsCronTask setNextRun()   Sets the current record's "next_run" value
 * 
 * @package    eventsfilter
 * @subpackage model
 * @author     Jeremy Kauffman
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasefsCronTask extends wfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('fs_cron_task');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('command', 'string', 1000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 1000,
             ));
        $this->hasColumn('frequency', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
        $this->hasColumn('priority', 'integer', 2, array(
             'type' => 'integer',
             'range' => 
             array(
              0 => 0,
              1 => 1000,
             ),
             'notnull' => true,
             'default' => 500,
             'length' => 2,
             ));
        $this->hasColumn('enabled', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('next_run', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));

        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}