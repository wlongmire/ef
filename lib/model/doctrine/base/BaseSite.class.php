<?php

/**
 * BaseSite
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $org_abbr
 * @property string $org_name
 * @property string $theme
 * @property enum $mode
 * @property string $domain
 * @property integer $logo_id
 * @property integer $location_id
 * @property Location $Location
 * @property Doctrine_Collection $TagHeadings
 * @property Doctrine_Collection $Disciplines
 * @property aMediaItem $Logo
 * @property Doctrine_Collection $UserGroups
 * @property Doctrine_Collection $SiteDiscipline
 * @property Doctrine_Collection $SiteTagHeading
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getOrgAbbr()        Returns the current record's "org_abbr" value
 * @method string              getOrgName()        Returns the current record's "org_name" value
 * @method string              getTheme()          Returns the current record's "theme" value
 * @method enum                getMode()           Returns the current record's "mode" value
 * @method string              getDomain()         Returns the current record's "domain" value
 * @method integer             getLogoId()         Returns the current record's "logo_id" value
 * @method integer             getLocationId()     Returns the current record's "location_id" value
 * @method Location            getLocation()       Returns the current record's "Location" value
 * @method Doctrine_Collection getTagHeadings()    Returns the current record's "TagHeadings" collection
 * @method Doctrine_Collection getDisciplines()    Returns the current record's "Disciplines" collection
 * @method aMediaItem          getLogo()           Returns the current record's "Logo" value
 * @method Doctrine_Collection getUserGroups()     Returns the current record's "UserGroups" collection
 * @method Doctrine_Collection getSiteDiscipline() Returns the current record's "SiteDiscipline" collection
 * @method Doctrine_Collection getSiteTagHeading() Returns the current record's "SiteTagHeading" collection
 * @method Site                setId()             Sets the current record's "id" value
 * @method Site                setName()           Sets the current record's "name" value
 * @method Site                setOrgAbbr()        Sets the current record's "org_abbr" value
 * @method Site                setOrgName()        Sets the current record's "org_name" value
 * @method Site                setTheme()          Sets the current record's "theme" value
 * @method Site                setMode()           Sets the current record's "mode" value
 * @method Site                setDomain()         Sets the current record's "domain" value
 * @method Site                setLogoId()         Sets the current record's "logo_id" value
 * @method Site                setLocationId()     Sets the current record's "location_id" value
 * @method Site                setLocation()       Sets the current record's "Location" value
 * @method Site                setTagHeadings()    Sets the current record's "TagHeadings" collection
 * @method Site                setDisciplines()    Sets the current record's "Disciplines" collection
 * @method Site                setLogo()           Sets the current record's "Logo" value
 * @method Site                setUserGroups()     Sets the current record's "UserGroups" collection
 * @method Site                setSiteDiscipline() Sets the current record's "SiteDiscipline" collection
 * @method Site                setSiteTagHeading() Sets the current record's "SiteTagHeading" collection
 * 
 * @package    eventsfilter
 * @subpackage model
 * @author     Jeremy Kauffman
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSite extends wfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('site');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 50,
             ));
        $this->hasColumn('org_abbr', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('org_name', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 60,
             ));
        $this->hasColumn('theme', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'phlocal',
             'length' => 20,
             ));
        $this->hasColumn('mode', 'enum', 20, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'listing',
              1 => 'entry',
             ),
             'default' => 'listing',
             'length' => 20,
             ));
        $this->hasColumn('domain', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('logo_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('location_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Location', array(
             'local' => 'location_id',
             'foreign' => 'id',
             'onDelete' => 'set null',
             'onUpdate' => 'cascade'));

        $this->hasMany('TagHeading as TagHeadings', array(
             'refClass' => 'SiteTagHeading',
             'local' => 'site_id',
             'foreign' => 'tag_heading_id'));

        $this->hasMany('Discipline as Disciplines', array(
             'refClass' => 'SiteDiscipline',
             'local' => 'site_id',
             'foreign' => 'discipline_id'));

        $this->hasOne('aMediaItem as Logo', array(
             'local' => 'logo_id',
             'foreign' => 'id',
             'onDelete' => 'restrict',
             'onUpdate' => 'cascade'));

        $this->hasMany('sfGuardUserGroup as UserGroups', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('SiteDiscipline', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $this->hasMany('SiteTagHeading', array(
             'local' => 'id',
             'foreign' => 'site_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $taggable0 = new Taggable();
        $this->actAs($timestampable0);
        $this->actAs($taggable0);
    }
}