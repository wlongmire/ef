<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $venue_id
 * @property integer $event_type_id
 * @property integer $media_item_id
 * @property string $name
 * @property text $blurb
 * @property decimal $min_cost
 * @property decimal $max_cost
 * @property string $url
 * @property string $ticket_url
 * @property boolean $is_published
 * @property string $suggested_venue_name
 * @property aMediaItem $Picture
 * @property Venue $Venue
 * @property EventType $EventType
 * @property Doctrine_Collection $Profiles
 * @property Doctrine_Collection $Disciplines
 * @property Doctrine_Collection $Owners
 * @property EventRecurrance $EventRecurrance
 * @property Doctrine_Collection $EventOccurances
 * @property Doctrine_Collection $EventProfile
 * @property Doctrine_Collection $EventDiscipline
 * @property Doctrine_Collection $EventTagging
 * @property Doctrine_Collection $EventOwner
 * 
 * @method integer             getId()                   Returns the current record's "id" value
 * @method integer             getVenueId()              Returns the current record's "venue_id" value
 * @method integer             getEventTypeId()          Returns the current record's "event_type_id" value
 * @method integer             getMediaItemId()          Returns the current record's "media_item_id" value
 * @method string              getName()                 Returns the current record's "name" value
 * @method text                getBlurb()                Returns the current record's "blurb" value
 * @method decimal             getMinCost()              Returns the current record's "min_cost" value
 * @method decimal             getMaxCost()              Returns the current record's "max_cost" value
 * @method string              getUrl()                  Returns the current record's "url" value
 * @method string              getTicketUrl()            Returns the current record's "ticket_url" value
 * @method boolean             getIsPublished()          Returns the current record's "is_published" value
 * @method string              getSuggestedVenueName()   Returns the current record's "suggested_venue_name" value
 * @method aMediaItem          getPicture()              Returns the current record's "Picture" value
 * @method Venue               getVenue()                Returns the current record's "Venue" value
 * @method EventType           getEventType()            Returns the current record's "EventType" value
 * @method Doctrine_Collection getProfiles()             Returns the current record's "Profiles" collection
 * @method Doctrine_Collection getDisciplines()          Returns the current record's "Disciplines" collection
 * @method Doctrine_Collection getOwners()               Returns the current record's "Owners" collection
 * @method EventRecurrance     getEventRecurrance()      Returns the current record's "EventRecurrance" value
 * @method Doctrine_Collection getEventOccurances()      Returns the current record's "EventOccurances" collection
 * @method Doctrine_Collection getEventProfile()         Returns the current record's "EventProfile" collection
 * @method Doctrine_Collection getEventDiscipline()      Returns the current record's "EventDiscipline" collection
 * @method Doctrine_Collection getEventTagging()         Returns the current record's "EventTagging" collection
 * @method Doctrine_Collection getEventOwner()           Returns the current record's "EventOwner" collection
 * @method Event               setId()                   Sets the current record's "id" value
 * @method Event               setVenueId()              Sets the current record's "venue_id" value
 * @method Event               setEventTypeId()          Sets the current record's "event_type_id" value
 * @method Event               setMediaItemId()          Sets the current record's "media_item_id" value
 * @method Event               setName()                 Sets the current record's "name" value
 * @method Event               setBlurb()                Sets the current record's "blurb" value
 * @method Event               setMinCost()              Sets the current record's "min_cost" value
 * @method Event               setMaxCost()              Sets the current record's "max_cost" value
 * @method Event               setUrl()                  Sets the current record's "url" value
 * @method Event               setTicketUrl()            Sets the current record's "ticket_url" value
 * @method Event               setIsPublished()          Sets the current record's "is_published" value
 * @method Event               setSuggestedVenueName()   Sets the current record's "suggested_venue_name" value
 * @method Event               setPicture()              Sets the current record's "Picture" value
 * @method Event               setVenue()                Sets the current record's "Venue" value
 * @method Event               setEventType()            Sets the current record's "EventType" value
 * @method Event               setProfiles()             Sets the current record's "Profiles" collection
 * @method Event               setDisciplines()          Sets the current record's "Disciplines" collection
 * @method Event               setOwners()               Sets the current record's "Owners" collection
 * @method Event               setEventRecurrance()      Sets the current record's "EventRecurrance" value
 * @method Event               setEventOccurances()      Sets the current record's "EventOccurances" collection
 * @method Event               setEventProfile()         Sets the current record's "EventProfile" collection
 * @method Event               setEventDiscipline()      Sets the current record's "EventDiscipline" collection
 * @method Event               setEventTagging()         Sets the current record's "EventTagging" collection
 * @method Event               setEventOwner()           Sets the current record's "EventOwner" collection
 * 
 * @package    eventsfilter
 * @subpackage model
 * @author     Jeremy Kauffman
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends wfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('venue_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('event_type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('media_item_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('blurb', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('min_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'range' => 
             array(
              0 => 0,
              1 => 9999,
             ),
             ));
        $this->hasColumn('max_cost', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 2,
             'range' => 
             array(
              0 => 0,
              1 => 9999,
             ),
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'url' => true,
             'length' => 255,
             ));
        $this->hasColumn('ticket_url', 'string', 255, array(
             'type' => 'string',
             'url' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_published', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'notnull' => true,
             ));
        $this->hasColumn('suggested_venue_name', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));


        $this->index('name', array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->index('is_published', array(
             'fields' => 
             array(
              0 => 'is_published',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('aMediaItem as Picture', array(
             'local' => 'media_item_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'cascade'));

        $this->hasOne('Venue', array(
             'local' => 'venue_id',
             'foreign' => 'id',
             'onDelete' => 'restrict',
             'onUpdate' => 'cascade'));

        $this->hasOne('EventType', array(
             'local' => 'event_type_id',
             'foreign' => 'id',
             'onDelete' => 'restrict',
             'onUpdate' => 'cascade'));

        $this->hasMany('Profile as Profiles', array(
             'refClass' => 'EventProfile',
             'local' => 'event_id',
             'foreign' => 'profile_id'));

        $this->hasMany('Discipline as Disciplines', array(
             'refClass' => 'EventDiscipline',
             'local' => 'event_id',
             'foreign' => 'discipline_id'));

        $this->hasMany('sfGuardUser as Owners', array(
             'refClass' => 'EventOwner',
             'local' => 'event_id',
             'foreign' => 'user_id'));

        $this->hasOne('EventRecurrance', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventOccurance as EventOccurances', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventProfile', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventDiscipline', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventTagging', array(
             'local' => 'id',
             'foreign' => 'taggable_id'));

        $this->hasMany('EventOwner', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $taggable0 = new Taggable();
        $this->actAs($timestampable0);
        $this->actAs($taggable0);
    }
}