<?php

/**
 * BaseProfileOwner
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $profile_id
 * @property integer $user_id
 * @property Profile $Profile
 * @property sfGuardUser $User
 * 
 * @method integer      getProfileId()  Returns the current record's "profile_id" value
 * @method integer      getUserId()     Returns the current record's "user_id" value
 * @method Profile      getProfile()    Returns the current record's "Profile" value
 * @method sfGuardUser  getUser()       Returns the current record's "User" value
 * @method ProfileOwner setProfileId()  Sets the current record's "profile_id" value
 * @method ProfileOwner setUserId()     Sets the current record's "user_id" value
 * @method ProfileOwner setProfile()    Sets the current record's "Profile" value
 * @method ProfileOwner setUser()       Sets the current record's "User" value
 * 
 * @package    eventsfilter
 * @subpackage model
 * @author     Jeremy Kauffman
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProfileOwner extends wfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('profile_owner');
        $this->hasColumn('profile_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Profile', array(
             'local' => 'profile_id',
             'foreign' => 'id',
             'onDelete' => 'cascade',
             'onUpdate' => 'cascade'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'cascade',
             'onUpdate' => 'cascade'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}