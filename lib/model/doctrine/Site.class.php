<?php

/**
 * Site
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    eventsfilter
 * @subpackage model
 * @author     Jeremy Kauffman
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Site extends BaseSite
{
  const MODE_LISTING = 'listing',
        MODE_ENTRY = 'entry';  
  
  protected static $current = null;
  
  public static function setCurrent($url)
  {
    $site = Doctrine_Query::create()->from('Site s')
              ->select('s.*, s.location_id')
              ->where('s.domain = ? OR CONCAT(s.name, ?) = ? OR CONCAT(s.name, ?) = ?', array($url, ".phlocal.com", $url, ".eventsfilter.com", $url))
              ->fetchOne();
    if (!$site)
    {
      $site = SiteTable::getInstance()->findOneByDomain('phlocal.com');
    }
    if (!$site)
    {
      throw new InvalidArgumentException('No sites found including phlocal. This should never happen.');
    }
    static::$current = $site;
  }
  
  /**
   * @return Site
   */
  public static function current()
  {
    return static::$current;
  }
  
  public function allowReorganize()
  {
    return $this->name == 'eventsfilter';
  }
  
  public function isBeta()
  {
    return $this->name == 'eventsfilter';
  }
  
  public function displayAuthentication()
  {
    return $this->name == static::MODE_ENTRY;
  }
  
  public function useDynamicNavigation()
  {
    return $this->mode == static::MODE_LISTING;
  }
  
  public function alwaysShowImages()
  {
    return $this->name != 'eventsfilter';
  }
  
  public function displayTextFooter()
  {
    return $this->name != 'eventsfilter';
  }
  
  public function useFixedColumns()
  {
    return $this->name != 'eventsfilter';
  }  
  
  public function displayCmsNavigation()
  {
    return $this->name == 'eventsfilter';
  }
  
  public function displaySiteWideAds()
  {
    return $this->mode == static::MODE_LISTING && $this->name != 'phlocal';
  }
    
  public function getUrl()
  {
    return $this->domain;
  }

  public function hasCustomPaymentInstructions()
  {
    return $this->name == 'dp2013';
  }
  
  public function displayGeneratedLocalTitle()
  {
    return $this->url == 'phlocal.com';
  }
  
  protected $fallbackFilters = null;
  public function getFallbackFilters($model = null)
  {
    if (!isset($this->fallbackFilters))
    {
      $this->fallbackFilters = array();
      $tagNames = $this->getFixedTagNames();
      if ($tagNames)
      {
        if ($model != 'profile')
        {
          $this->fallbackFilters['tag'] = TagTable::findByNames($tagNames);          
        }
        else
        {
          $this->fallbackFilters['profile_event_tag'] = TagTable::findByNames($tagNames); 
        }
      }      
      if ($this->location_id && $model != 'profile')
      {
        $this->fallbackFilters['location'] = $this->Location;
      }
    }
    return $this->fallbackFilters;
  }
  
  public function getFixedTagNames()
  {
    return $this->getTags();
  }

  public function getGlobalLessPath()
  {
    return sfConfig::get('sf_web_dir') . '/css/less/' . strtolower($this->name) . '.less';
  }
  
  public function getGlobalVirtualPageSlug()
  {
    return $this->generateVirtualPageSlug($this->url);
  }
  
  public function generateVirtualPageSlug($siteName)
  {
    return strtolower($siteName) . '_global_virtual_page';    
  }
  
  public function getDefaultFilters()
  {
    aTools::globalSetup(array('type' => 'aText', 'singleton' => true, 'slug' => $this->getGlobalVirtualPageSlug()));
    $page = aTools::getCurrentPage();
    $slot = $page->getSlot('phlocal-nav');
    $text = $slot && $slot->type == 'aText' ? strip_tags($slot->value) : '';
    aTools::globalShutdown();    
    $tokens = explode("\n", $text, 2);
    list($url) = str_getcsv($tokens[0]);
    parse_str(parse_url(html_entity_decode($url), PHP_URL_QUERY), $array);
    return $array;
  }
  
  public function getReturnUrl()
  {
    if (!preg_match('/(phlocal.com|eventsfilter.com)$/', $this->domain))
    {
      return 'http://www.' . $this->domain;
    }
    return null;
  }
  
  public function getLayout()
  {
    return $this->theme;
  }
}
