<?php

/**
 * DisciplineTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DisciplineTable extends Wf_Doctrine_Table {

  /**
   * Returns an instance of this class.
   *
   * @return object DisciplineTable
   */
  public static function getInstance() 
  {
    return Doctrine_Core::getTable('Discipline');
  }
  
  /**
   * User joined with Profile
   * @return Doctrine_Query
   */
  public static function buildQueryForLiveSearch(Doctrine_Query $q = null)
  {
    return static::getInstance()->createQuery('ds')->orderBy('ds.name ASC');
  }
  
    /**
   * !!NOTE: findBySearchQuery receives UNSANITIZED input.
   * 
   * @param string $query
   * @param array $params None currently used
   * @return array Up to $limit Fields matching $query indexed by Field id
   */
  public static function findBySearchQuery($query, $params = array())
  {
    $query = static::buildQueryForLiveSearch()
      ->select('ds.id, ds.id AS key, ds.name AS label, ds.name AS name') //should match sfGuardUser::getLiveSearchName
      ->addWhere('ds.name LIKE ?', '%' . $query . '%')
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ->limit(10);

    return $query->execute();
  }
  
  public function findObjectForFilter($id)
  {
    return Doctrine_Query::create()->from('Discipline dp')->where('dp.id = ?', $id)->fetchOne();
  }
  
  public static function populateEvents(&$events)
  {
    $disciplines = Doctrine_Query::create()
      ->from('Discipline dp')
      ->select('dp.name')
      ->innerJoin('dp.EventDiscipline ed')
      ->addSelect('ed.event_id')
      ->whereIn('ed.event_id', wfToolkit::arrayPluck($events, 'id'))
      ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
      ->execute();
    
    foreach($disciplines as $discipline)
    {
      foreach($discipline['EventDiscipline'] as $ed)
      {
        $events[$ed['event_id']]['Disciplines'][] = $discipline;
      }
    }
  }
  
  public function buildQueryForProfileIds(Doctrine_Query $query, array $profileIds)
  {
    $rootAlias = $query->getRootAlias();
    $query->innerJoin($rootAlias. '.ProfileDiscipline pd')
      ->andWhereIn('pd.profile_id', $profileIds);
  }
  
  public function buildQueryForEventIds(Doctrine_Query $query, array $eventIds)
  {
    $rootAlias = $query->getRootAlias();
    $query->innerJoin($rootAlias. '.EventDiscipline ed')
      ->andWhereIn('ed.event_id', $eventIds);
  }  
  
  public static function findEnabledSortedTreesForSite(Site $site)
  {
    $orClauses = array();
    foreach($site->Disciplines as $discipline)
    {
      $orClauses[] = sprintf('(root_id = %s AND ((lft >= %s AND rgt <= %s) OR (lft <= %s AND rgt >= %s)))', 
                                $discipline->root_id, $discipline->lft, $discipline->rgt, $discipline->lft, $discipline->rgt); 
    }
    $andWhere = $orClauses ? implode(' OR ', $orClauses) : '';
    return static::getInstance()->getTree()->findSortedTrees('name', $andWhere);
  }

}